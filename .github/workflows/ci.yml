name: Continuous Integration

on: [push, pull_request]
env:
  VCPKG_DEFAULT_BINARY_CACHE: /tmp/vcpkg-archives
  VCPKG_INSTALLED_DIR: /tmp/vcpkg_installed

jobs:
  build:
    runs-on: ${{ matrix.buildplat[0] }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        python:
          - ["3.8", "cp38"]
          - ["3.9", "cp39"]
          - ["3.10", "cp310"]
          - ["3.11", "cp311"]
        buildplat:
          - [ubuntu-20.04, manylinux_x86_64, x64-linux-dynamic-cxx17-abi0]

    steps:
      - name: Set up Python ${{ matrix.python[0] }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python[0] }}

      - name: Upgrade pip and install build
        run: >
          python -m pip install -U pip virtualenv

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Get VCPKG SHA1
        id: vcpkg-sha1
        run: echo "sha1=$(grep VCPKG_SHA1 .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create VCPKG binary asset folder
        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

      - name: Cache VCPKG binary assets
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          key: "vcpkg-cache-\
            ${{ matrix.buildplat[1] }}-\
            ${{ matrix.buildplat[2] }}-\
            ${{ hashfiles('.env', 'vcpkg/manifest/vcpkg.json', 'vcpkg/overlay-ports/*', \
                          format('vcpkg/overlay-triplets/{0}.cmake', matrix.buildplat[2])) }}"
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        env:
          CIBW_BUILD: ${{ matrix.python[1] }}-${{ matrix.buildplat[1] }}
          CIBW_BUILD_FRONTEND: build
          CIBW_BEFORE_ALL_LINUX: yum install -y zip flex bison gcc-gfortran
          CIBW_ENVIRONMENT_LINUX: >
            VCPKG_DEFAULT_BINARY_CACHE=/host/${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
            VCPKG_TARGET_TRIPLET=${{ matrix.buildplat[2] }}
            VCPKG_INSTALLED_DIR=${{ env.VCPKG_INSTALLED_DIR }}
            LD_LIBRARY_PATH=${{ env.VCPKG_INSTALLED_DIR }}/${{ matrix.buildplat[2] }}/lib
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel} --exclude libarrow_python.so --exclude libarrow.so.1200
          CIBW_TEST_SKIP: "*"
          CIBW_TEST_EXTRAS: test
          CIBW_TEST_COMMAND: py.test -s -vvv --pyargs casa_arrow

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

      - name: Install and test wheel
        # python-casacore doesn't have a 3.11 wheel yet
        # https://github.com/ratt-ru/casa-arrow/issues/26
        if: ${{ contains('3.8 3.9 3.10', matrix.python[0]) }}
        run: |
          cd $HOME
          virtualenv $HOME/venv
          source $HOME/venv/bin/activate && pip install --find-links=${{ github.workspace }}/wheelhouse casa-arrow[test]
          source $HOME/venv/bin/activate && py.test -s -vvv --pyargs casa_arrow
