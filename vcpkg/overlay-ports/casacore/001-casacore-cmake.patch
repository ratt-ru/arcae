diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7e48b3ff2..45a781bce 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -196,13 +196,13 @@ if (NOT CMAKE_BUILD_TYPE)
     endif(_cmpvar STREQUAL "dbg" OR _cmpvar STREQUAL "debug")
 endif (NOT CMAKE_BUILD_TYPE)
 
-# Detect if the compiler supports C++11 if we want to use it.
-check_cxx_compiler_flag(-std=c++11 HAS_CXX11)
-if (HAS_CXX11)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+# Detect if the compiler supports C++17 if we want to use it.
+check_cxx_compiler_flag(-std=c++17 HAS_CXX17)
+if (HAS_CXX17)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
 else()
-    message(FATAL_ERROR "Casacore build requires a c++11 compatible compiler")
-endif (HAS_CXX11)
+    message(FATAL_ERROR "Casacore build requires a c++17 compatible compiler")
+endif (HAS_CXX17)
 
 # Ensure clang is not complaining about unused arguments.
 if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
@@ -547,8 +547,41 @@ endforeach (module)
 
 # Install pkg-config support file
 CONFIGURE_FILE("casacore.pc.in" "casacore.pc" @ONLY)
-set(CASA_PKGCONFIG_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
-INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/casacore.pc" DESTINATION "${CASA_PKGCONFIG_INSTALL_PREFIX}")
+# set(CASA_PKGCONFIG_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
+# INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/casacore.pc" DESTINATION "${CASA_PKGCONFIG_INSTALL_PREFIX}")
+INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/casacore.pc" DESTINATION lib/pkgconfig)
+
+# generate and install export file
+install(EXPORT casacore
+    FILE "${PROJECT_NAME}Targets.cmake"
+    NAMESPACE ${namespace}::
+    DESTINATION cmake
+)
+
+include(CMakePackageConfigHelpers)
+
+# generate the version file for the config file
+write_basic_package_version_file(
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
+    VERSION "${version}"
+    COMPATIBILITY AnyNewerVersion
+)
+# create config file
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    INSTALL_DESTINATION cmake
+)
+# install config files
+install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
+    DESTINATION cmake
+)
+# generate the export targets for the build tree
+export(EXPORT casacore
+    FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Targets.cmake"
+    NAMESPACE ${namespace}::
+)
 
 # Show summary.
 message (STATUS "CMAKE_SYSTEM .......... = ${CMAKE_SYSTEM}")
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 000000000..8c9ad12aa
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,5 @@
+@PACKAGE_INIT@
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
diff --git a/casa/CMakeLists.txt b/casa/CMakeLists.txt
index 5e8c1bd97..880d501b3 100644
--- a/casa/CMakeLists.txt
+++ b/casa/CMakeLists.txt
@@ -15,7 +15,9 @@ set (
 parser_inputs
 JsonGram
 )
- 
+
+find_package(ZLIB REQUIRED)
+
 foreach (src ${parser_inputs})
     if (BISON_VERSION VERSION_LESS 3.0)
         BISON_TARGET (${src} Json/${src}.yy ${CMAKE_CURRENT_BINARY_DIR}/${src}.ycc COMPILE_FLAGS "-y -p ${src}")
@@ -256,18 +258,15 @@ endif (READLINE_FOUND)
 
 find_library(libm m)
 
-target_link_libraries (
-casa_casa
-${de_libraries}
-${libm}
-dl
-${CASACORE_ARCH_LIBS}
-)
+target_link_libraries (casa_casa
+    PUBLIC ${de_libraries} ${libm} dl ${CASACORE_ARCH_LIBS}
+    PRIVATE ZLIB::ZLIB)
 
 add_subdirectory (apps)
 
 install (
 TARGETS casa_casa
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/cmake/FindFFTW3.cmake b/cmake/FindFFTW3.cmake
index 886f3bebb..66d117674 100644
--- a/cmake/FindFFTW3.cmake
+++ b/cmake/FindFFTW3.cmake
@@ -58,15 +58,6 @@ foreach(_comp ${_components})
   endif(_comp STREQUAL "single")
 endforeach(_comp ${_components})
 
-# If using threads, we need to link against threaded libraries as well.
-if(_use_threads)
-  set(_thread_libs)
-  foreach(_lib ${_libraries})
-    list(APPEND _thread_libs ${_lib}_threads)
-  endforeach(_lib ${_libraries})
-  set(_libraries ${_thread_libs} ${_libraries})
-endif(_use_threads)
-
 # Keep a list of variable names that we need to pass on to
 # find_package_handle_standard_args().
 set(_check_list)
diff --git a/cmake/FindGSL.cmake b/cmake/FindGSL.cmake
deleted file mode 100644
index 4f4d31bf5..000000000
--- a/cmake/FindGSL.cmake
+++ /dev/null
@@ -1,150 +0,0 @@
-# Script found on KDE-edu list
-# Permission obtained from Jan Woetzel to use under a BSD-style license
-# (left to OpenCog to determine the specific BSD license, but this file should
-# be included in CMake proper soon...).
-#
-# Look for the header file
-# Try to find gnu scientific library GSL
-# See
-# http://www.gnu.org/software/gsl/  and
-# http://gnuwin32.sourceforge.net/packages/gsl.htm
-#
-# Once run this will define:
-#
-# GSL_FOUND       = system has GSL lib
-#
-# GSL_LIBRARIES   = full path to the libraries
-#    on Unix/Linux with additional linker flags from "gsl-config --libs"
-#
-# CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially "`gsl-config --cxxflags`"
-#
-# GSL_INCLUDE_DIR      = where to find headers
-#
-# GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix
-# GSL_EXE_LINKER_FLAGS = rpath on Unix
-#
-# Felix Woelk 07/2004
-# Jan Woetzel
-#
-# www.mip.informatik.uni-kiel.de
-# --------------------------------
-
-IF(WIN32)
-  # JW tested with gsl-1.8, Windows XP, MSVS 7.1
-  SET(GSL_POSSIBLE_ROOT_DIRS
-    ${GSL_ROOT_DIR}
-    $ENV{GSL_ROOT_DIR}
-    ${GSL_DIR}
-    ${GSL_HOME}
-    $ENV{GSL_DIR}
-    $ENV{GSL_HOME}
-    $ENV{EXTRA}
-    )
-  FIND_PATH(GSL_INCLUDE_DIR
-    NAMES gsl/gsl_cdf.h gsl/gsl_randist.h
-    PATHS ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES include
-    DOC "GSL header include dir"
-    )
-
-  FIND_LIBRARY(GSL_GSL_LIBRARY
-    NAMES gsl libgsl
-    PATHS  ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES lib
-    DOC "GSL library dir" )
-
-  FIND_LIBRARY(GSL_GSLCBLAS_LIBRARY
-    NAMES gslcblas libgslcblas
-    PATHS  ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES lib
-    DOC "GSL cblas library dir" )
-
-  SET(GSL_LIBRARIES ${GSL_GSL_LIBRARY})
-
-  #MESSAGE("DBG\n"
-  #  "GSL_GSL_LIBRARY=${GSL_GSL_LIBRARY}\n"
-  #  "GSL_GSLCBLAS_LIBRARY=${GSL_GSLCBLAS_LIBRARY}\n"
-  #  "GSL_LIBRARIES=${GSL_LIBRARIES}")
-
-ELSE(WIN32)
-
-  IF(UNIX)
-    SET(GSL_CONFIG_PREFER_PATH
-      "$ENV{GSL_DIR}/bin"
-      "$ENV{GSL_DIR}"
-      "$ENV{GSL_HOME}/bin"
-      "$ENV{GSL_HOME}"
-      CACHE STRING "preferred path to GSL (gsl-config)")
-    FIND_PROGRAM(GSL_CONFIG gsl-config
-      ${GSL_CONFIG_PREFER_PATH}
-      /usr/bin/
-      )
-    # MESSAGE("DBG GSL_CONFIG ${GSL_CONFIG}")
-
-    IF (GSL_CONFIG)
-      # set CXXFLAGS to be fed into CXX_FLAGS by the user:
-      SET(GSL_CXX_FLAGS "`${GSL_CONFIG} --cflags`")
-
-      # set INCLUDE_DIRS to prefix+include
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --prefix
-        OUTPUT_VARIABLE GSL_PREFIX)
-      SET(GSL_INCLUDE_DIR ${GSL_PREFIX}/include CACHE STRING INTERNAL)
-
-      # set link libraries and link flags
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --libs
-        OUTPUT_VARIABLE GSL_LIBRARIES)
-      #SET(GSL_LIBRARIES "`${GSL_CONFIG} --libs`")
-
-      # extract link dirs for rpath
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --libs
-        OUTPUT_VARIABLE GSL_CONFIG_LIBS )
-
-      # split off the link dirs (for rpath)
-      # use regular expression to match wildcard equivalent "-L*<endchar>"
-      # with <endchar> is a space or a semicolon
-      STRING(REGEX MATCHALL "[-][L]([^ ;])+"
-        GSL_LINK_DIRECTORIES_WITH_PREFIX
-        "${GSL_CONFIG_LIBS}" )
-      #      MESSAGE("DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}")
-
-      # remove prefix -L because we need the pure directory for LINK_DIRECTORIES
-
-      IF (GSL_LINK_DIRECTORIES_WITH_PREFIX)
-        STRING(REGEX REPLACE "[-][L]" "" GSL_LINK_DIRECTORIES ${GSL_LINK_DIRECTORIES_WITH_PREFIX} )
-      ENDIF (GSL_LINK_DIRECTORIES_WITH_PREFIX)
-      SET(GSL_EXE_LINKER_FLAGS "-Wl,-rpath,${GSL_LINK_DIRECTORIES}" CACHE STRING INTERNAL)
-      #      MESSAGE("DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}")
-      #      MESSAGE("DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}")
-
-      #      ADD_DEFINITIONS("-DHAVE_GSL")
-      #      SET(GSL_DEFINITIONS "-DHAVE_GSL")
-      MARK_AS_ADVANCED(
-        GSL_CXX_FLAGS
-        GSL_INCLUDE_DIR
-        GSL_LIBRARIES
-        GSL_LINK_DIRECTORIES
-        GSL_DEFINITIONS
-      )
-  	  #MESSAGE(STATUS "Using GSL from ${GSL_PREFIX}")
-
-    ELSE(GSL_CONFIG)
-      MESSAGE("FindGSL.cmake: gsl-config not found. Please set it manually. GSL_CONFIG=${GSL_CONFIG}")
-    ENDIF(GSL_CONFIG)
-
-  ENDIF(UNIX)
-ENDIF(WIN32)
-
-
-IF(GSL_LIBRARIES)
-  IF(GSL_INCLUDE_DIR OR GSL_CXX_FLAGS)
-    SET(GSL_FOUND 1)
-  ENDIF(GSL_INCLUDE_DIR OR GSL_CXX_FLAGS)
-ELSE(GSL_LIBRARIES)
-  IF (GSL_FIND_REQUIRED)
-    message(SEND_ERROR "FindGSL.cmake: Unable to find the required GSL libraries")
-  ENDIF(GSL_FIND_REQUIRED)
-ENDIF(GSL_LIBRARIES)
-
diff --git a/coordinates/CMakeLists.txt b/coordinates/CMakeLists.txt
index 7ef92b148..b9123ab69 100644
--- a/coordinates/CMakeLists.txt
+++ b/coordinates/CMakeLists.txt
@@ -25,6 +25,7 @@ Coordinates/TabularCoordinate.cc
 target_link_libraries (casa_coordinates casa_fits ${WCSLIB_LIBRARIES} ${CASACORE_ARCH_LIBS})
 
 install (TARGETS casa_coordinates
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/derivedmscal/CMakeLists.txt b/derivedmscal/CMakeLists.txt
index 23c16aee7..6d3a28aaa 100644
--- a/derivedmscal/CMakeLists.txt
+++ b/derivedmscal/CMakeLists.txt
@@ -13,6 +13,7 @@ DerivedMC/UDFMSCal.cc
 target_link_libraries (casa_derivedmscal casa_ms ${CASACORE_ARCH_LIBS})
 
 install (TARGETS casa_derivedmscal
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/fits/CMakeLists.txt b/fits/CMakeLists.txt
index 2104c5612..5b14174c2 100644
--- a/fits/CMakeLists.txt
+++ b/fits/CMakeLists.txt
@@ -24,7 +24,10 @@ FITS/blockio.cc
 FITS/FITSReader.cc
 )
 
-target_link_libraries (casa_fits casa_measures ${CFITSIO_LIBRARIES} ${CASACORE_ARCH_LIBS})
+find_package(ZLIB REQUIRED)
+target_link_libraries (casa_fits
+    PUBLIC casa_measures ${CFITSIO_LIBRARIES} ${CASACORE_ARCH_LIBS}
+    PRIVATE ZLIB::ZLIB)
 
 add_subdirectory (apps)
 
@@ -32,6 +35,7 @@ add_subdirectory (apps)
 add_subdirectory (FITS/test ${EXCL_ALL})
 
 install (TARGETS casa_fits
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/fits/apps/CMakeLists.txt b/fits/apps/CMakeLists.txt
index 578ee92d7..c4f075d51 100644
--- a/fits/apps/CMakeLists.txt
+++ b/fits/apps/CMakeLists.txt
@@ -1,3 +1,4 @@
+find_package(ZLIB REQUIRED)
 add_executable (fits2table  fits2table/fits2table.cc)
-target_link_libraries (fits2table casa_fits ${CASACORE_ARCH_LIBS})
+target_link_libraries (fits2table PUBLIC casa_fits ${CASACORE_ARCH_LIBS} PRIVATE ZLIB::ZLIB)
 install(TARGETS fits2table DESTINATION bin)
diff --git a/images/CMakeLists.txt b/images/CMakeLists.txt
index 85af2b8fc..d496e9953 100644
--- a/images/CMakeLists.txt
+++ b/images/CMakeLists.txt
@@ -75,6 +75,7 @@ add_subdirectory (apps)
 
 install (
 TARGETS casa_images
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/lattices/CMakeLists.txt b/lattices/CMakeLists.txt
index 45ffaa17d..13afbc5f8 100644
--- a/lattices/CMakeLists.txt
+++ b/lattices/CMakeLists.txt
@@ -68,6 +68,7 @@ ${CASACORE_ARCH_LIBS}
 )
 
 install (TARGETS casa_lattices
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/meas/CMakeLists.txt b/meas/CMakeLists.txt
index c3266bcf8..ed4314751 100644
--- a/meas/CMakeLists.txt
+++ b/meas/CMakeLists.txt
@@ -24,6 +24,7 @@ MeasUDF/Register.cc
 target_link_libraries (casa_meas casa_measures)
 
 install (TARGETS casa_meas
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/measures/CMakeLists.txt b/measures/CMakeLists.txt
index 63ca4817a..0d39da69c 100644
--- a/measures/CMakeLists.txt
+++ b/measures/CMakeLists.txt
@@ -75,6 +75,7 @@ add_subdirectory (apps)
 
 install (
 TARGETS casa_measures
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/mirlib/CMakeLists.txt b/mirlib/CMakeLists.txt
index 0703a5d1d..46f26840f 100644
--- a/mirlib/CMakeLists.txt
+++ b/mirlib/CMakeLists.txt
@@ -22,6 +22,7 @@ target_link_libraries (casa_mirlib casa_casa ${CASACORE_ARCH_LIBS})
 
 install (
 TARGETS casa_mirlib
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/ms/CMakeLists.txt b/ms/CMakeLists.txt
index f7fcfa053..dcad9e7c1 100644
--- a/ms/CMakeLists.txt
+++ b/ms/CMakeLists.txt
@@ -1,5 +1,5 @@
 #
-# CASA MeasurementSets 
+# CASA MeasurementSets
 #
 
 set (
@@ -168,6 +168,7 @@ ${CASACORE_ARCH_LIBS}
 add_subdirectory (apps)
 
 install (TARGETS casa_ms
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/msfits/CMakeLists.txt b/msfits/CMakeLists.txt
index 28f1884a2..85a312ad0 100644
--- a/msfits/CMakeLists.txt
+++ b/msfits/CMakeLists.txt
@@ -30,6 +30,7 @@ add_subdirectory (apps)
 
 install (
 TARGETS casa_msfits
+EXPORT casacore
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
 LIBRARY PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
diff --git a/python/CMakeLists-cmake3.14.txt b/python/CMakeLists-cmake3.14.txt
index 7c981f734..1ce6b4d6c 100644
--- a/python/CMakeLists-cmake3.14.txt
+++ b/python/CMakeLists-cmake3.14.txt
@@ -63,6 +63,7 @@ Converters/PycArray.tcc
 target_link_libraries (casa_python casa_casa ${PYTHON2_Boost_LIBRARIES} ${PYTHON2_LIBRARIES} ${CASACORE_ARCH_LIBS})
 
 install (TARGETS casa_python
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/python/CMakeLists-older-cmake.txt b/python/CMakeLists-older-cmake.txt
index 96411e7d9..e145da3bb 100644
--- a/python/CMakeLists-older-cmake.txt
+++ b/python/CMakeLists-older-cmake.txt
@@ -90,6 +90,7 @@ Converters/PycArray.tcc
 target_link_libraries (casa_python casa_casa ${PYTHON2_Boost_LIBRARIES} ${PYTHON2_LIBRARIES} ${CASACORE_ARCH_LIBS})
 
 install (TARGETS casa_python
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/python3/CMakeLists-cmake3.14.txt b/python3/CMakeLists-cmake3.14.txt
index 26d5ca533..35b458e1b 100644
--- a/python3/CMakeLists-cmake3.14.txt
+++ b/python3/CMakeLists-cmake3.14.txt
@@ -54,6 +54,7 @@ add_library (casa_python3
 target_link_libraries (casa_python3 casa_casa ${PYTHON3_Boost_LIBRARIES} ${PYTHON3_LIBRARIES})
 
 install (TARGETS casa_python3
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/python3/CMakeLists-older-cmake.txt b/python3/CMakeLists-older-cmake.txt
index 8a42cc905..5fe0999ca 100644
--- a/python3/CMakeLists-older-cmake.txt
+++ b/python3/CMakeLists-older-cmake.txt
@@ -84,6 +84,7 @@ add_library (casa_python3
 target_link_libraries (casa_python3 casa_casa ${PYTHON3_Boost_LIBRARIES} ${PYTHON3_LIBRARIES})
 
 install (TARGETS casa_python3
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/scimath/CMakeLists.txt b/scimath/CMakeLists.txt
index 77b4f70ec..85deae634 100644
--- a/scimath/CMakeLists.txt
+++ b/scimath/CMakeLists.txt
@@ -54,6 +54,7 @@ else (FFTW3_FOUND)
 endif (FFTW3_FOUND)
 
 install (TARGETS casa_scimath
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/scimath_f/CMakeLists.txt b/scimath_f/CMakeLists.txt
index 69bd4d757..8e6aa8d8a 100644
--- a/scimath_f/CMakeLists.txt
+++ b/scimath_f/CMakeLists.txt
@@ -50,6 +50,7 @@ target_link_libraries (casa_scimath_f casa_tables ${LAPACK_LIBRARIES} ${BLAS_LIB
 
 install (
 TARGETS casa_scimath_f
+EXPORT casacore
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
 LIBRARY PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
diff --git a/tables/CMakeLists.txt b/tables/CMakeLists.txt
index 9c012552d..7a66af6a2 100644
--- a/tables/CMakeLists.txt
+++ b/tables/CMakeLists.txt
@@ -228,6 +228,7 @@ endif(MPI_FOUND)
 add_subdirectory (apps)
 
 install (TARGETS casa_tables
+EXPORT casacore
 RUNTIME DESTINATION bin
 LIBRARY DESTINATION lib${LIB_SUFFIX}
 ARCHIVE DESTINATION lib${LIB_SUFFIX}
diff --git a/tables/Dysco/uvector.h b/tables/Dysco/uvector.h
index 139bd035e..9828461b8 100644
--- a/tables/Dysco/uvector.h
+++ b/tables/Dysco/uvector.h
@@ -75,7 +75,7 @@ class uvector : private Alloc
 	static_assert(std::is_standard_layout<Tp>(), "A uvector can only hold classes with standard layout");
 private:
 #if __cplusplus > 201402L
-	typedef std::allocator_traits<allocator_type>::is_always_equal allocator_is_always_equal;
+	typedef typename std::allocator_traits<Alloc>::is_always_equal allocator_is_always_equal;
 #else
 	typedef std::false_type allocator_is_always_equal;
 #endif
diff --git a/tables/Tables/PlainTable.cc b/tables/Tables/PlainTable.cc
index 6214242b4..3c2c0dcb8 100644
--- a/tables/Tables/PlainTable.cc
+++ b/tables/Tables/PlainTable.cc
@@ -47,7 +47,7 @@
 namespace casacore { //# NAMESPACE CASACORE - BEGIN
 
 //# Initialize the static TableCache object.
-TableCache PlainTable::theirTableCache;
+thread_local TableCache PlainTable::theirTableCache;
 
 PlainTable::PlainTable (SetupNewTable& newtab, rownr_t nrrow, Bool initialize,
                         const TableLock& lockOptions, int endianFormat,
diff --git a/tables/Tables/PlainTable.h b/tables/Tables/PlainTable.h
index 452e33cd3..bb46a0dba 100644
--- a/tables/Tables/PlainTable.h
+++ b/tables/Tables/PlainTable.h
@@ -316,7 +316,7 @@ private:
                                        //# False = little endian canonical
     TSMOption      tsmOption_p;
     //# cache of open (plain) tables
-    static TableCache theirTableCache;
+    static thread_local TableCache theirTableCache;
 };
 
 
